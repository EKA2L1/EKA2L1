# Vita3K emulator project
# Copyright (C) 2018 Vita3K team
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

name: C/C++ CI

on: [push, pull_request]

jobs:
  build-android:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./src/emu/android

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '17'

    - name: Set up build environment
      run: |
        sudo apt-get update
        sudo apt-get -y install build-essential libc6-dev g++-multilib
      
    - name: Build with Gradle
      run: ./gradlew assembleRelease -PciArg='-DCI=ON'
    
    - name: Setup build tool version variable
      shell: bash
      run: |
        BUILD_TOOL_VERSION=$(ls /usr/local/lib/android/sdk/build-tools/ | tail -n 1)
        echo "BUILD_TOOL_VERSION=$BUILD_TOOL_VERSION" >> $GITHUB_ENV
        echo Last build tool version is: $BUILD_TOOL_VERSION
    
    - name: Sign APK
      id: sign-android-app
      uses: r0adkll/sign-android-release@v1.0.4
      with:
        releaseDirectory: ./src/emu/android/app/build/outputs/apk/release
        signingKeyBase64: ${{ secrets.SIGNING_KEY }}
        alias: ${{ secrets.ALIAS }}
        keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
        keyPassword: ${{ secrets.KEY_PASSWORD }}
      env:
        BUILD_TOOLS_VERSION: ${{ env.BUILD_TOOL_VERSION }}
    
    - name: Compute git short sha
      id: git_short_sha
      run: echo "::set-output name=value::$(git rev-parse --short HEAD)"

    - name: Rename APK
      run: |
        mv ${{ steps.sign-android-app.outputs.signedReleaseFile }} eka2l1-${{ steps.git_short_sha.outputs.value }}.apk
        cp eka2l1-${{ steps.git_short_sha.outputs.value }}.apk android-latest.apk
      working-directory: ${{ github.workspace }}

    - name: Upload APK
      uses: actions/upload-artifact@v1
      with:
        name: eka2l1-${{ steps.git_short_sha.outputs.value }}
        path: eka2l1-${{ steps.git_short_sha.outputs.value }}.apk

  build-desktop:
    runs-on: ${{ matrix.os }}
    env:
      cache-version: v1
      MACOSX_DEPLOYMENT_TARGET: 10.9

    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, ubuntu-20.04, windows-latest]
        config: [Release]

    steps:
    - name: Set up build environment (macos-latest)
      run: |
        brew install ccache
        echo "/usr/local/opt/ccache/libexec" >> $GITHUB_PATH
        echo "CCACHE_DIR=/tmp/ccache" >> $GITHUB_ENV
      if: matrix.os == 'macos-latest'

    - name: Set up build environment (ubuntu-latest)
      run: |
        sudo apt-get update
        sudo apt-get -y install ccache libgtk-3-dev libpulse-dev libasound2-dev libsdl2-dev pulseaudio gcc-11 g++-11
        echo "CCACHE_DIR=/tmp/ccache" >> $GITHUB_ENV
        echo "CC=gcc-11" >> $GITHUB_ENV
        echo "CXX=g++-11" >> $GITHUB_ENV
      if: matrix.os == 'ubuntu-20.04'
  
    - uses: actions/cache@v1
      with:
        path: /tmp/ccache
        key: ccache-${{ env.cache-version }}-${{ matrix.os }}-${{ matrix.config }}-${{ github.sha }}
        restore-keys: ccache-${{ env.cache-version }}-${{ matrix.os }}-${{ matrix.config }}-
      if: matrix.os != 'windows-latest'

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
          
    - name: Cache Qt
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{ runner.os }}-QtCacheV5

    - name: Install Qt5
      uses: jurplel/install-qt-action@v2
      with:
        version: '5.15.2'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        tools: ${{ env.QT_INSTALL_TOOLS }}
      if: matrix.os != 'windows-latest'
        
    - name: Install Qt5 (Windows)
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        cached: ${{ steps.cache-qt.outputs.cache-hit }}
        aqtversion: '==3.1.*'
        host: 'windows'
        target: 'desktop'
        arch: 'win64_msvc2019_64'
      if: matrix.os == 'windows-latest'

    - name: Set up SDL 2.0.20 (ubuntu-latest)
      run: |
        SDL2VER=2.0.20
        if [[ ! -e ~/.ccache ]]; then
          mkdir ~/.ccache
        fi  
        cd ~/.ccache
        if [[ ! -e SDL2-${SDL2VER} ]]; then
          curl -sLO https://libsdl.org/release/SDL2-${SDL2VER}.tar.gz
          tar -xzf SDL2-${SDL2VER}.tar.gz
          cd SDL2-${SDL2VER}
          ./configure --prefix=/usr/local
          make && cd ../
          rm SDL2-${SDL2VER}.tar.gz
        fi
        sudo make -C SDL2-${SDL2VER} install
      if: matrix.os == 'ubuntu-20.04'

    - name: Patch Qt to fix compile error with GCC-11 (ubuntu-latest)
      run: |
        sed -i 's/ThreadEngineStarter<void>(ThreadEngine<void> \*_threadEngine)/ThreadEngineStarter(ThreadEngine<void> \*_threadEngine)/' "${{ env.Qt5_DIR }}/include/QtConcurrent/qtconcurrentthreadengine.h"
      shell: bash
      if: matrix.os == 'ubuntu-20.04'
      
    - name: CMake configure
      run: cmake -B build -DCI=ON -DEKA2L1_ENABLE_SCRIPTING_ABILITY=OFF -DEKA2L1_DEPLOY_DMG=ON -DEKA2L1_ENABLE_UNEXPECTED_EXCEPTION_HANDLER=ON -DEKA2L1_ENABLE_DISCORD_RICH_PRESENCE=ON -DCMAKE_PREFIX_PATH=${{ env.Qt5_DIR }} -DCMAKE_BUILD_TYPE=${{ matrix.config }}
      if: matrix.os == 'macos-latest'

    - name: CMake configure
      run: cmake -B build -DCI=ON -DEKA2L1_ENABLE_UNEXPECTED_EXCEPTION_HANDLER=ON -DEKA2L1_NO_TERMINAL=ON -DEKA2L1_ENABLE_DISCORD_RICH_PRESENCE=ON -DCMAKE_PREFIX_PATH=${{ env.Qt5_DIR }} -DCMAKE_BUILD_TYPE=${{ matrix.config }}
      if: matrix.os != 'macos-latest'

    - name: CMake build
      run: cmake --build build --config ${{ matrix.config }} --parallel 2 --target eka2l1_qt
      if: matrix.os != 'windows-latest'
    
    - name: CMake build
      run: cmake --build build --config ${{ matrix.config }} --parallel 2 --target eka2l1_qt updater
      if: matrix.os == 'windows-latest'

    - name: Generate AppImage
      run: |
        chmod u+x scripts/generate_appimage.sh
        ./scripts/generate_appimage.sh
      if: matrix.os == 'ubuntu-20.04'

    - name: Compute git short sha
      id: git_short_sha
      run: echo "::set-output name=value::$(git rev-parse --short HEAD)"
      
    - name: Copy OpenSSL binaries
      run: |
        Invoke-WebRequest https://radrat.vn/eka2l1/roms/build/libcrypto-1_1-x64.dll -OutFile build\bin\libcrypto-1_1.dll
        Invoke-WebRequest https://radrat.vn/eka2l1/roms/build/libssl-1_1-x64.dll -OutFile build\bin\libssl-1_1.dll
      shell: pwsh
      if: matrix.os == 'windows-latest'

    - uses: actions/upload-artifact@v2
      with:
        name: eka2l1-${{ steps.git_short_sha.outputs.value }}-${{ matrix.os }}
        path: build/bin
      if: matrix.os != 'ubuntu-20.04'

    - uses: actions/upload-artifact@v2
      with:
        name: eka2l1-${{ steps.git_short_sha.outputs.value }}-${{ matrix.os }}
        path: build/eka2l1-qt-x64.AppImage
      if: matrix.os == 'ubuntu-20.04'

  roll-release:
   needs: [build-android, build-desktop]
   runs-on: "ubuntu-latest"
   if: github.ref == 'refs/heads/master'
   steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: recursive
    
    - name: Compute git short sha
      id: git_short_sha
      run: echo "::set-output name=value::$(git rev-parse --short HEAD)"
      
    - name: Download Windows Artifacts
      uses: actions/download-artifact@v3
      with:
        name: "eka2l1-${{ steps.git_short_sha.outputs.value }}-windows-latest"
        path: windows-files

    - name: Download MacOS Artifact
      uses: actions/download-artifact@v3
      with:
        name: "eka2l1-${{ steps.git_short_sha.outputs.value }}-macos-latest"
        path: mac-files
        
    - name: Download Ubuntu Artifact
      uses: actions/download-artifact@v3
      with:
        name: "eka2l1-${{ steps.git_short_sha.outputs.value }}-ubuntu-20.04"
        
    - name: Download Android Artifact
      uses: actions/download-artifact@v3
      with:
        name: "eka2l1-${{ steps.git_short_sha.outputs.value }}"
        
    - name: Rename artifacts for release
      run: |
        (cd windows-files && zip -r ../EKA2L1-Windows-x86_64.zip . && cd ..)
        (cd mac-files && zip -r ../EKA2L1-MacOS-x86_64.zip . && cd ..)
        mv eka2l1-qt-x64.AppImage EKA2L1-Linux-x86_64.AppImage
        mv eka2l1-${{ steps.git_short_sha.outputs.value }}.apk EKA2L1-Android.apk

    - name: Create release
      uses: "marvinpinto/action-automatic-releases@latest"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "continous"
        prerelease: false
        title: "Automatic CI builds"
        files: |
          EKA2L1-Windows-x86_64.zip
          EKA2L1-MacOS-x86_64.zip
          EKA2L1-Linux-x86_64.AppImage
          EKA2L1-Android.apk

